server.port = 8080

spring.datasource.url = jdbc:postgresql://localhost:5432/ms_visionner
spring.datasource.username = postgres
spring.datasource.password = Ilestetards1+

spring.jpa.hibernate.ddl-auto = update

# Client Eureka
spring.application.name = visionner-service

eureka.client.register-with-eureka = true
eureka.client.fetch-registry = true
eureka.client.service-url.defaultZone = http://10.111.21.78:9000/eureka/


# RabbitMQ
spring.rabbitmq.host = 10.111.21.78
spring.rabbitmq.port = 5672
spring.rabbitmq.username = guest
spring.rabbitmq.password = guest


# RabbitMQ - Exchanges & Queues (Producer)
spring.cloud.stream.bindings.visionner-detailed-out-0.destination = ms.visionner
spring.cloud.stream.rabbit.bindings.visionner-detailed-out-0.producer.routing-key-expression = 'visionner.detailed.askfor'


# RabbitMQ - Exchanges & Queues (Consumer)
spring.cloud.function.definition = visionnerFilmError;visionnerUserError;visionnerAddMovie

spring.cloud.stream.bindings.visionnerFilmError-in-0.destination = ms.film
spring.cloud.stream.bindings.visionnerFilmError-in-0.group = film.error
spring.cloud.stream.rabbit.bindings.visionnerFilmError-in-0.consumer.binding-routing-key = film.error

spring.cloud.stream.bindings.visionnerUserError-in-0.destination = ms.user
spring.cloud.stream.bindings.visionnerUserError-in-0.group = user.error
spring.cloud.stream.rabbit.bindings.visionnerUserError-in-0.consumer.binding-routing-key = user.askfor

spring.cloud.stream.bindings.visionnerAddMovie-in-0.destination = ms.visionner
spring.cloud.stream.bindings.visionnerAddMovie-in-0.group = visionner.addMovie
spring.cloud.stream.rabbit.bindings.visionnerAddMovie-in-0.consumer.binding-routing-key = filmUserVisionner.add
